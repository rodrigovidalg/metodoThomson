/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.metodothomson;

/**
 *
 * @author user
 */

import javax.swing.JFileChooser;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;

import java.util.regex.Pattern;
import java.util.HashMap;
import java.util.ArrayList;

public class frm_metodoThomson extends javax.swing.JFrame {

    private java.util.ArrayList<String> listaExpresiones;
    private java.util.ArrayList<String> listaCadenas;
    /**
     * Creates new form frm_metodoThomson
     */
    public frm_metodoThomson() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnCargarExpresiones = new javax.swing.JButton();
        lblTituloExpresiones = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtExpresionesCargadas = new javax.swing.JTextArea();
        lblTituloCadenas = new javax.swing.JLabel();
        btnCargarCadenas = new javax.swing.JButton();
        lblArchivoCadenas = new javax.swing.JLabel();
        lblTituloAnalisis = new javax.swing.JLabel();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtResultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        btnCargarExpresiones.setBackground(new java.awt.Color(0, 0, 0));
        btnCargarExpresiones.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarExpresiones.setText("Cargar Archivo (.txt)");
        btnCargarExpresiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarExpresionesActionPerformed(evt);
            }
        });

        lblTituloExpresiones.setBackground(new java.awt.Color(0, 0, 0));
        lblTituloExpresiones.setForeground(new java.awt.Color(255, 255, 255));
        lblTituloExpresiones.setText("1. Cargar Expresiones Regulares");

        txtExpresionesCargadas.setColumns(20);
        txtExpresionesCargadas.setRows(5);
        jScrollPane8.setViewportView(txtExpresionesCargadas);

        lblTituloCadenas.setBackground(new java.awt.Color(0, 0, 0));
        lblTituloCadenas.setForeground(new java.awt.Color(255, 255, 255));
        lblTituloCadenas.setText("2. Cargar Cadenas a Validar");

        btnCargarCadenas.setBackground(new java.awt.Color(0, 0, 0));
        btnCargarCadenas.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarCadenas.setText("Cargar Archivo (.txt)");
        btnCargarCadenas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCadenasActionPerformed(evt);
            }
        });

        lblArchivoCadenas.setBackground(new java.awt.Color(0, 0, 0));
        lblArchivoCadenas.setForeground(new java.awt.Color(255, 255, 255));
        lblArchivoCadenas.setText("Archivo: (ninguno)");

        lblTituloAnalisis.setBackground(new java.awt.Color(0, 0, 0));
        lblTituloAnalisis.setForeground(new java.awt.Color(255, 255, 255));
        lblTituloAnalisis.setText("3. Ejecutar y Ver Resultados");

        btnAnalizar.setBackground(new java.awt.Color(0, 0, 0));
        btnAnalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAnalizar.setText("Analizar Cadenas");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultados.setColumns(20);
        txtResultados.setRows(5);
        jScrollPane9.setViewportView(txtResultados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTituloExpresiones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(btnCargarExpresiones, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTituloAnalisis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8)
                    .addComponent(jScrollPane9)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTituloCadenas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblArchivoCadenas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCargarCadenas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnCargarExpresiones))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblTituloExpresiones)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTituloCadenas)
                    .addComponent(btnCargarCadenas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblArchivoCadenas)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTituloAnalisis)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarExpresionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarExpresionesActionPerformed
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        selector.setDialogTitle("Selecciona el archivo de expresiones (.txt)");

        // Mostramos el diálogo para abrir archivo
        if (selector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivo = selector.getSelectedFile();
            listaExpresiones = new ArrayList<>();

            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                String linea;
                StringBuilder expresionesTexto = new StringBuilder();

                while ((linea = br.readLine()) != null) {
                    if (!linea.trim().isEmpty()) {
                        listaExpresiones.add(linea.trim());
                        expresionesTexto.append(linea.trim()).append("\n");
                    }
                }

                txtExpresionesCargadas.setText(expresionesTexto.toString());
                JOptionPane.showMessageDialog(this, "Archivo de expresiones cargado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCargarExpresionesActionPerformed

    private void btnCargarCadenasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCadenasActionPerformed
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        selector.setDialogTitle("Selecciona el archivo de cadenas (.txt)");

        if (selector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivo = selector.getSelectedFile();
            lblArchivoCadenas.setText("Archivo: " + archivo.getName());
            listaCadenas = new ArrayList<>(); 

            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    // Solo agregamos la línea a la lista si no está vacía o compuesta solo de espacios.
                    if (!linea.trim().isEmpty()) {
                        listaCadenas.add(linea);
                    }
                }
                JOptionPane.showMessageDialog(this, "Archivo de cadenas cargado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCargarCadenasActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        // 1. Validar que los datos estén cargados
        if (listaExpresiones == null || listaExpresiones.isEmpty() ||
            listaCadenas == null || listaCadenas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debes cargar primero un archivo de expresiones y uno de cadenas.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 2. Preparar estructuras para resultados
        HashMap<String, Integer> resumenConteo = new HashMap<>();
        HashMap<String, ArrayList<String>> detalleCoincidencias = new HashMap<>();

        // 3. Inicializar las estructuras
        for (String exp : listaExpresiones) {
            resumenConteo.put(exp, 0);
            detalleCoincidencias.put(exp, new ArrayList<>());
        }

        // 4. Procesar cada cadena contra cada expresión
        for (String cadena : listaCadenas) {
            for (String exp : listaExpresiones) {
                try {
                    // Usamos Pattern.matches() que es un atajo para compilar y hacer match completo
                    if (Pattern.matches(exp, cadena)) {
                        resumenConteo.put(exp, resumenConteo.get(exp) + 1);
                        detalleCoincidencias.get(exp).add(cadena);
                    }
                } catch (java.util.regex.PatternSyntaxException e) {
                    txtResultados.setText("ERROR: La expresión regular '" + exp + "' está mal escrita.\n\nDetalle: " + e.getMessage());
                    return;
                }
            }
        }

        StringBuilder resultadoFinal = new StringBuilder();
        resultadoFinal.append(" ANÁLISIS\n");
        resultadoFinal.append("===============================\n\n");

        resultadoFinal.append("RESUMEN DE COINCIDENCIAS\n");
        resultadoFinal.append("===============================\n");
        for (String exp : resumenConteo.keySet()) {
            resultadoFinal.append("Expresión '").append(exp).append("': ").append(" Cadenas validadad: ")
            .append(resumenConteo.get(exp)).append("\n");
        }

        resultadoFinal.append("\nDETALLE DE COINCIDENCIAS\n");
        for (String exp : detalleCoincidencias.keySet()) {
            resultadoFinal.append("\nCadenas que cumplen con '").append(exp).append("'-\n");
            ArrayList<String> coincidencias = detalleCoincidencias.get(exp);
            if (coincidencias.isEmpty()) {
                resultadoFinal.append("  (Ninguna)\n");
            } else {
                for (String match : coincidencias) {
                    resultadoFinal.append("  - \"").append(match).append("\"\n");
                }
            }
        }

        txtResultados.setText(resultadoFinal.toString());
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_metodoThomson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_metodoThomson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_metodoThomson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_metodoThomson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_metodoThomson().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnCargarCadenas;
    private javax.swing.JButton btnCargarExpresiones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblArchivoCadenas;
    private javax.swing.JLabel lblTituloAnalisis;
    private javax.swing.JLabel lblTituloCadenas;
    private javax.swing.JLabel lblTituloExpresiones;
    private javax.swing.JTextArea txtExpresionesCargadas;
    private javax.swing.JTextArea txtResultados;
    // End of variables declaration//GEN-END:variables
}
